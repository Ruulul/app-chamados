// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Filial {
  id            Int              @id @default(autoincrement())
  codigo        String           @db.VarChar(32)
  nome          String           @db.VarChar(100)
  chamados      Chamado[]
  usuarios      Usuario[]
  categorias    Categoria[]
  tipos         Tipo[]
  departamentos Departamento[]
  metadados     MetadadoFilial[]
}

model MetadadoFilial {
  id       Int    @id @default(autoincrement())
  filial   Filial @relation(fields: [filialId], references: [id])
  filialId Int    @default(1)
  nome     String @db.VarChar(255)
  valor    String @db.VarChar(255)
}

model Chamado {
  id        Int               @id @default(autoincrement())
  autor     Usuario?          @relation(fields: [autorId], references: [id])
  autorId   Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  prazo     DateTime
  assunto   String            @db.VarChar(255)
  chat      Mensagem[]
  metadados MetadadoChamado[]

  Filial   Filial @relation(fields: [filialId], references: [id])
  filialId Int    @default(1)
}

model MetadadoChamado {
  id        Int     @id @default(autoincrement())
  chamado   Chamado @relation(fields: [chamadoId], references: [id])
  chamadoId Int
  nome      String  @db.VarChar(255)
  valor     String  @db.VarChar(255)
}

model MetadadoUsuario {
  id        Int     @id @default(autoincrement())
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  nome      String  @db.VarChar(255)
  valor     String  @db.VarChar(255)
}

model MetadadoMensagem {
  id         Int      @id @default(autoincrement())
  mensagem   Mensagem @relation(fields: [mensagemId], references: [id])
  mensagemId Int
  nome       String   @db.VarChar(255)
  valor      String   @db.VarChar(255)
}

model Mensagem {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  //autor     String
  autor     Usuario?           @relation(fields: [autorId], references: [id])
  autorId   Int
  mensagem  String             @db.VarChar(1000)
  chamado   Chamado            @relation(fields: [chamadoId], references: [id])
  chamadoId Int
  metadados MetadadoMensagem[]
}

model Usuario {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  email     String            @unique
  senha     String
  nome      String?
  sobrenome String?
  chamados  Chamado[]
  mensagems Mensagem[]
  metadados MetadadoUsuario[]
  Filial    Filial            @relation(fields: [filialId], references: [id])
  filialId  Int               @default(1)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Categoria {
  id        Int    @id @default(autoincrement())
  tipo      String @db.VarChar(255)
  categoria String @db.VarChar(255)
  Filial    Filial @relation(fields: [filialId], references: [id])
  filialId  Int    @default(1)
}

model Departamento {
  id           Int    @id @default(autoincrement())
  departamento String @db.VarChar(255)
  Filial       Filial @relation(fields: [filialId], references: [id])
  filialId     Int    @default(1)
}

model Tipo {
  id       Int    @id @default(autoincrement())
  tipo     String @db.VarChar(255)
  Filial   Filial @relation(fields: [filialId], references: [id])
  filialId Int    @default(1)
}

//  Metadados se liga às tabelas pelo ID numérico;
//  Quais campos existem e outros meta metadados são associados por Tag
model Processo {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  idEtapaAtual  Int?
  Tag           String    @db.VarChar(30)
  idUsuario     Int
  //metadados   Metadado[]
}

model Log {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  idUsuario     Int
  titulo        String    @db.VarChar(255)
  descr         String    @db.VarChar(1000)
  idProcesso    Int
  idEtapa       Int
  next          Int?
  prev          Int?
  Tag           String    @db.VarChar(30)
  //metadados   Metadado[]
}

model Etapa {
  id            Int       @id @default(autoincrement())
  Tag           String    @db.VarChar(30)
  prev          Int?
  next          Int?
  idProcesso    Int 
  //metadados   Metadado[]
}

model Metadado {
  id            Int       @id @default(autoincrement())
  model         String    @db.VarChar(30)
  idModel       Int
  campo         String    @db.VarChar(30)
  valor         String    @db.VarChar(255)
}

model ProcessoMeta {
  Tag           String     @unique @db.VarChar(30)
  mensagemTag   String
  //campos      CampoMeta[]
}

model EtapaMeta {
  id            Int        @id @default(autoincrement())
  Tag           String     @db.VarChar(30)
  //multiplo      Boolean Não há razão para esse campo: se dept é null, claramente é uma etapa de múltiplos departamentos
  complexo      Boolean
  dept          Int?
  prev          Int?
  next          Int?
  processoTag   String       @db.VarChar(30)
  //campos      CampoMeta[]
}
model EtapaMetaListDept {
  id            Int       @id @default(autoincrement())
  idEtapa       Int
  dept          Int
  //campos      CampoMeta[]
}

model MensagemMeta {
  Tag           String    @unique @db.VarChar(30)
  //campos      CampoMeta[]
}

model CampoMeta {
  id            Int       @id @default(autoincrement())
  campoMeta     String    @db.VarChar(30)
  model         String    @db.VarChar(30)
  tagModel      String    @db.VarChar(30)
  tipo          String    @db.VarChar(30)
  hasDict       Boolean
  notifica      Boolean
}

model CampoMetaOpcao {
  id            Int        @id @default(autoincrement())
  idCampoMeta   Int
  opcao         String     @db.VarChar(30)
}